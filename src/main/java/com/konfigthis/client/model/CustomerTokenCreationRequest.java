/*
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  **Note:** Examples provided in this section includes full payloads, including all supported fields , required and optionals. In order to implement a best in class request we recommend you don't include customer details when initiating a payment session. Refer to [Initiate a payment](https://docs.klarna.com/klarna-payments/integrate-with-klarna-payments/step-1-initiate-a-payment/) section for further details.  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Address;
import com.konfigthis.client.model.Customer;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CustomerTokenCreationRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CustomerTokenCreationRequest {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_BILLING_ADDRESS = "billing_address";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS)
  private Address billingAddress;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private Customer customer;

  /**
   * Intended use for the token.
   */
  @JsonAdapter(IntendedUseEnum.Adapter.class)
 public enum IntendedUseEnum {
    SUBSCRIPTION("SUBSCRIPTION");

    private String value;

    IntendedUseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IntendedUseEnum fromValue(String value) {
      for (IntendedUseEnum b : IntendedUseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IntendedUseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IntendedUseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IntendedUseEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IntendedUseEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_INTENDED_USE = "intended_use";
  @SerializedName(SERIALIZED_NAME_INTENDED_USE)
  private IntendedUseEnum intendedUse;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_PURCHASE_COUNTRY = "purchase_country";
  @SerializedName(SERIALIZED_NAME_PURCHASE_COUNTRY)
  private String purchaseCountry;

  public static final String SERIALIZED_NAME_PURCHASE_CURRENCY = "purchase_currency";
  @SerializedName(SERIALIZED_NAME_PURCHASE_CURRENCY)
  private String purchaseCurrency;

  public CustomerTokenCreationRequest() {
  }

  public CustomerTokenCreationRequest description(String description) {
    
    
    if (description != null && description.length() < 1) {
      throw new IllegalArgumentException("Invalid value for description. Length must be greater than or equal to 1.");
    }
    
    this.description = description;
    return this;
  }

   /**
   * Description of the purpose of the token.
   * @return description
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Description of the purpose of the token.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    if (description != null && description.length() < 1) {
      throw new IllegalArgumentException("Invalid value for description. Length must be greater than or equal to 1.");
    }
    this.description = description;
  }


  public CustomerTokenCreationRequest billingAddress(Address billingAddress) {
    
    
    
    
    this.billingAddress = billingAddress;
    return this;
  }

   /**
   * Get billingAddress
   * @return billingAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Address getBillingAddress() {
    return billingAddress;
  }


  public void setBillingAddress(Address billingAddress) {
    
    
    
    this.billingAddress = billingAddress;
  }


  public CustomerTokenCreationRequest customer(Customer customer) {
    
    
    
    
    this.customer = customer;
    return this;
  }

   /**
   * Get customer
   * @return customer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Customer getCustomer() {
    return customer;
  }


  public void setCustomer(Customer customer) {
    
    
    
    this.customer = customer;
  }


  public CustomerTokenCreationRequest intendedUse(IntendedUseEnum intendedUse) {
    
    
    
    
    this.intendedUse = intendedUse;
    return this;
  }

   /**
   * Intended use for the token.
   * @return intendedUse
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Intended use for the token.")

  public IntendedUseEnum getIntendedUse() {
    return intendedUse;
  }


  public void setIntendedUse(IntendedUseEnum intendedUse) {
    
    
    
    this.intendedUse = intendedUse;
  }


  public CustomerTokenCreationRequest locale(String locale) {
    
    
    
    
    this.locale = locale;
    return this;
  }

   /**
   * RFC 1766 customer&#39;s locale.
   * @return locale
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "en-GB", required = true, value = "RFC 1766 customer's locale.")

  public String getLocale() {
    return locale;
  }


  public void setLocale(String locale) {
    
    
    
    this.locale = locale;
  }


  public CustomerTokenCreationRequest purchaseCountry(String purchaseCountry) {
    
    
    
    
    this.purchaseCountry = purchaseCountry;
    return this;
  }

   /**
   * ISO 3166 alpha-2 purchase country.
   * @return purchaseCountry
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "GB", required = true, value = "ISO 3166 alpha-2 purchase country.")

  public String getPurchaseCountry() {
    return purchaseCountry;
  }


  public void setPurchaseCountry(String purchaseCountry) {
    
    
    
    this.purchaseCountry = purchaseCountry;
  }


  public CustomerTokenCreationRequest purchaseCurrency(String purchaseCurrency) {
    
    
    
    
    this.purchaseCurrency = purchaseCurrency;
    return this;
  }

   /**
   * ISO 4217 purchase currency.
   * @return purchaseCurrency
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "GBP", required = true, value = "ISO 4217 purchase currency.")

  public String getPurchaseCurrency() {
    return purchaseCurrency;
  }


  public void setPurchaseCurrency(String purchaseCurrency) {
    
    
    
    this.purchaseCurrency = purchaseCurrency;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CustomerTokenCreationRequest instance itself
   */
  public CustomerTokenCreationRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerTokenCreationRequest customerTokenCreationRequest = (CustomerTokenCreationRequest) o;
    return Objects.equals(this.description, customerTokenCreationRequest.description) &&
        Objects.equals(this.billingAddress, customerTokenCreationRequest.billingAddress) &&
        Objects.equals(this.customer, customerTokenCreationRequest.customer) &&
        Objects.equals(this.intendedUse, customerTokenCreationRequest.intendedUse) &&
        Objects.equals(this.locale, customerTokenCreationRequest.locale) &&
        Objects.equals(this.purchaseCountry, customerTokenCreationRequest.purchaseCountry) &&
        Objects.equals(this.purchaseCurrency, customerTokenCreationRequest.purchaseCurrency)&&
        Objects.equals(this.additionalProperties, customerTokenCreationRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, billingAddress, customer, intendedUse, locale, purchaseCountry, purchaseCurrency, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerTokenCreationRequest {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    intendedUse: ").append(toIndentedString(intendedUse)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    purchaseCountry: ").append(toIndentedString(purchaseCountry)).append("\n");
    sb.append("    purchaseCurrency: ").append(toIndentedString(purchaseCurrency)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("billing_address");
    openapiFields.add("customer");
    openapiFields.add("intended_use");
    openapiFields.add("locale");
    openapiFields.add("purchase_country");
    openapiFields.add("purchase_currency");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("intended_use");
    openapiRequiredFields.add("locale");
    openapiRequiredFields.add("purchase_country");
    openapiRequiredFields.add("purchase_currency");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CustomerTokenCreationRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CustomerTokenCreationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerTokenCreationRequest is not found in the empty JSON string", CustomerTokenCreationRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CustomerTokenCreationRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `billing_address`
      if (jsonObj.get("billing_address") != null && !jsonObj.get("billing_address").isJsonNull()) {
        Address.validateJsonObject(jsonObj.getAsJsonObject("billing_address"));
      }
      // validate the optional field `customer`
      if (jsonObj.get("customer") != null && !jsonObj.get("customer").isJsonNull()) {
        Customer.validateJsonObject(jsonObj.getAsJsonObject("customer"));
      }
      if (!jsonObj.get("intended_use").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `intended_use` to be a primitive type in the JSON string but got `%s`", jsonObj.get("intended_use").toString()));
      }
      if (!jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      if (!jsonObj.get("purchase_country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchase_country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchase_country").toString()));
      }
      if (!jsonObj.get("purchase_currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchase_currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchase_currency").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerTokenCreationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerTokenCreationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerTokenCreationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerTokenCreationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerTokenCreationRequest>() {
           @Override
           public void write(JsonWriter out, CustomerTokenCreationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerTokenCreationRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CustomerTokenCreationRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomerTokenCreationRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomerTokenCreationRequest
  * @throws IOException if the JSON string is invalid with respect to CustomerTokenCreationRequest
  */
  public static CustomerTokenCreationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerTokenCreationRequest.class);
  }

 /**
  * Convert an instance of CustomerTokenCreationRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

