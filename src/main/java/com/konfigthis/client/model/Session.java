/*
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  **Note:** Examples provided in this section includes full payloads, including all supported fields , required and optionals. In order to implement a best in class request we recommend you don't include customer details when initiating a payment session. Refer to [Initiate a payment](https://docs.klarna.com/klarna-payments/integrate-with-klarna-payments/step-1-initiate-a-payment/) section for further details.  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Address;
import com.konfigthis.client.model.Attachment;
import com.konfigthis.client.model.Customer;
import com.konfigthis.client.model.MerchantUrls;
import com.konfigthis.client.model.Options;
import com.konfigthis.client.model.OrderLine;
import com.konfigthis.client.model.PaymentMethodCategory;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Session
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Session {
  /**
   * The acquiring channel in which the session takes place. Ecommerce is default unless specified. Any other values should be defined in the agreement.
   */
  @JsonAdapter(AcquiringChannelEnum.Adapter.class)
 public enum AcquiringChannelEnum {
    ECOMMERCE("ECOMMERCE"),
    
    IN_STORE("IN_STORE"),
    
    TELESALES("TELESALES");

    private String value;

    AcquiringChannelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AcquiringChannelEnum fromValue(String value) {
      for (AcquiringChannelEnum b : AcquiringChannelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AcquiringChannelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AcquiringChannelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AcquiringChannelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AcquiringChannelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ACQUIRING_CHANNEL = "acquiring_channel";
  @SerializedName(SERIALIZED_NAME_ACQUIRING_CHANNEL)
  private AcquiringChannelEnum acquiringChannel;

  public static final String SERIALIZED_NAME_ATTACHMENT = "attachment";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT)
  private Attachment attachment;

  public static final String SERIALIZED_NAME_AUTHORIZATION_TOKEN = "authorization_token";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_TOKEN)
  private String authorizationToken;

  public static final String SERIALIZED_NAME_BILLING_ADDRESS = "billing_address";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS)
  private Address billingAddress;

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "client_token";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_CUSTOM_PAYMENT_METHOD_IDS = "custom_payment_method_ids";
  @SerializedName(SERIALIZED_NAME_CUSTOM_PAYMENT_METHOD_IDS)
  private List<String> customPaymentMethodIds = null;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private Customer customer;

  public static final String SERIALIZED_NAME_DESIGN = "design";
  @SerializedName(SERIALIZED_NAME_DESIGN)
  private String design;

  public static final String SERIALIZED_NAME_EXPIRES_AT = "expires_at";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  private OffsetDateTime expiresAt;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_MERCHANT_DATA = "merchant_data";
  @SerializedName(SERIALIZED_NAME_MERCHANT_DATA)
  private String merchantData;

  public static final String SERIALIZED_NAME_MERCHANT_REFERENCE1 = "merchant_reference1";
  @SerializedName(SERIALIZED_NAME_MERCHANT_REFERENCE1)
  private String merchantReference1;

  public static final String SERIALIZED_NAME_MERCHANT_REFERENCE2 = "merchant_reference2";
  @SerializedName(SERIALIZED_NAME_MERCHANT_REFERENCE2)
  private String merchantReference2;

  public static final String SERIALIZED_NAME_MERCHANT_URLS = "merchant_urls";
  @SerializedName(SERIALIZED_NAME_MERCHANT_URLS)
  private MerchantUrls merchantUrls;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private Options options;

  public static final String SERIALIZED_NAME_ORDER_AMOUNT = "order_amount";
  @SerializedName(SERIALIZED_NAME_ORDER_AMOUNT)
  private Long orderAmount;

  public static final String SERIALIZED_NAME_ORDER_LINES = "order_lines";
  @SerializedName(SERIALIZED_NAME_ORDER_LINES)
  private List<OrderLine> orderLines = null;

  public static final String SERIALIZED_NAME_ORDER_TAX_AMOUNT = "order_tax_amount";
  @SerializedName(SERIALIZED_NAME_ORDER_TAX_AMOUNT)
  private Long orderTaxAmount;

  public static final String SERIALIZED_NAME_PAYMENT_METHOD_CATEGORIES = "payment_method_categories";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD_CATEGORIES)
  private Set<PaymentMethodCategory> paymentMethodCategories = null;

  public static final String SERIALIZED_NAME_PURCHASE_COUNTRY = "purchase_country";
  @SerializedName(SERIALIZED_NAME_PURCHASE_COUNTRY)
  private String purchaseCountry;

  public static final String SERIALIZED_NAME_PURCHASE_CURRENCY = "purchase_currency";
  @SerializedName(SERIALIZED_NAME_PURCHASE_CURRENCY)
  private String purchaseCurrency;

  public static final String SERIALIZED_NAME_SHIPPING_ADDRESS = "shipping_address";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ADDRESS)
  private Address shippingAddress;

  /**
   * The current status of the session. Possible values: &#39;complete&#39;, &#39;incomplete&#39; where &#39;complete&#39; is set when the order has been placed.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    COMPLETE("complete"),
    
    INCOMPLETE("incomplete");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * Intent for the session. The field is designed to let partners inform Klarna of the purpose of the customerâ€™s session.
   */
  @JsonAdapter(IntentEnum.Adapter.class)
 public enum IntentEnum {
    BUY("buy"),
    
    TOKENIZE("tokenize"),
    
    BUY_AND_TOKENIZE("buy_and_tokenize");

    private String value;

    IntentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IntentEnum fromValue(String value) {
      for (IntentEnum b : IntentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IntentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IntentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IntentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IntentEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_INTENT = "intent";
  @SerializedName(SERIALIZED_NAME_INTENT)
  private IntentEnum intent;

  public Session() {
  }

  
  public Session(
     String authorizationToken, 
     String clientToken, 
     OffsetDateTime expiresAt, 
     Set<PaymentMethodCategory> paymentMethodCategories, 
     StatusEnum status
  ) {
    this();
    this.authorizationToken = authorizationToken;
    this.clientToken = clientToken;
    this.expiresAt = expiresAt;
    this.paymentMethodCategories = paymentMethodCategories;
    this.status = status;
  }

  public Session acquiringChannel(AcquiringChannelEnum acquiringChannel) {
    
    
    
    
    this.acquiringChannel = acquiringChannel;
    return this;
  }

   /**
   * The acquiring channel in which the session takes place. Ecommerce is default unless specified. Any other values should be defined in the agreement.
   * @return acquiringChannel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ECOMMERCE", value = "The acquiring channel in which the session takes place. Ecommerce is default unless specified. Any other values should be defined in the agreement.")

  public AcquiringChannelEnum getAcquiringChannel() {
    return acquiringChannel;
  }


  public void setAcquiringChannel(AcquiringChannelEnum acquiringChannel) {
    
    
    
    this.acquiringChannel = acquiringChannel;
  }


  public Session attachment(Attachment attachment) {
    
    
    
    
    this.attachment = attachment;
    return this;
  }

   /**
   * Get attachment
   * @return attachment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Attachment getAttachment() {
    return attachment;
  }


  public void setAttachment(Attachment attachment) {
    
    
    
    this.attachment = attachment;
  }


   /**
   * Authorization token.
   * @return authorizationToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Authorization token.")

  public String getAuthorizationToken() {
    return authorizationToken;
  }




  public Session billingAddress(Address billingAddress) {
    
    
    
    
    this.billingAddress = billingAddress;
    return this;
  }

   /**
   * Get billingAddress
   * @return billingAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Address getBillingAddress() {
    return billingAddress;
  }


  public void setBillingAddress(Address billingAddress) {
    
    
    
    this.billingAddress = billingAddress;
  }


   /**
   * Token to be passed to the JS client
   * @return clientToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.ewogICJzZXNzaW9uX2lkIiA6ICIw", value = "Token to be passed to the JS client")

  public String getClientToken() {
    return clientToken;
  }




  public Session customPaymentMethodIds(List<String> customPaymentMethodIds) {
    
    
    
    
    this.customPaymentMethodIds = customPaymentMethodIds;
    return this;
  }

  public Session addCustomPaymentMethodIdsItem(String customPaymentMethodIdsItem) {
    if (this.customPaymentMethodIds == null) {
      this.customPaymentMethodIds = new ArrayList<>();
    }
    this.customPaymentMethodIds.add(customPaymentMethodIdsItem);
    return this;
  }

   /**
   * Promo codes - The array could be used to define which of the configured payment options within a payment category (pay_later, pay_over_time, etc.) should be shown for this purchase. Discuss with the delivery manager to know about the promo codes that will be configured for your account. The feature could also be used to provide promotional offers to specific customers (eg: 0% financing). Please be informed that the usage of this feature can have commercial implications. 
   * @return customPaymentMethodIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Promo codes - The array could be used to define which of the configured payment options within a payment category (pay_later, pay_over_time, etc.) should be shown for this purchase. Discuss with the delivery manager to know about the promo codes that will be configured for your account. The feature could also be used to provide promotional offers to specific customers (eg: 0% financing). Please be informed that the usage of this feature can have commercial implications. ")

  public List<String> getCustomPaymentMethodIds() {
    return customPaymentMethodIds;
  }


  public void setCustomPaymentMethodIds(List<String> customPaymentMethodIds) {
    
    
    
    this.customPaymentMethodIds = customPaymentMethodIds;
  }


  public Session customer(Customer customer) {
    
    
    
    
    this.customer = customer;
    return this;
  }

   /**
   * Get customer
   * @return customer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Customer getCustomer() {
    return customer;
  }


  public void setCustomer(Customer customer) {
    
    
    
    this.customer = customer;
  }


  public Session design(String design) {
    
    
    
    
    this.design = design;
    return this;
  }

   /**
   * Design package to use in the session. This can only by used if a custom design has been implemented for Klarna Payments and agreed upon in the agreement. It might have a financial impact. Delivery manager will provide the value for the parameter.
   * @return design
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Design package to use in the session. This can only by used if a custom design has been implemented for Klarna Payments and agreed upon in the agreement. It might have a financial impact. Delivery manager will provide the value for the parameter.")

  public String getDesign() {
    return design;
  }


  public void setDesign(String design) {
    
    
    
    this.design = design;
  }


   /**
   * Session expiration date
   * @return expiresAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2038-01-19T03:14:07Z", value = "Session expiration date")

  public OffsetDateTime getExpiresAt() {
    return expiresAt;
  }




  public Session locale(String locale) {
    
    
    
    
    this.locale = locale;
    return this;
  }

   /**
   * Used to define the language and region of the customer. The locale follows the format of [RFC 1766](https://datatracker.ietf.org/doc/rfc1766/), meaning its value consists of language-country. Read more on **[Supported Locals and Currencies](https://docs.klarna.com/klarna-payments/in-depth-knowledge/puchase-countries-currencies-locales/)**.
   * @return locale
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "en-GB", value = "Used to define the language and region of the customer. The locale follows the format of [RFC 1766](https://datatracker.ietf.org/doc/rfc1766/), meaning its value consists of language-country. Read more on **[Supported Locals and Currencies](https://docs.klarna.com/klarna-payments/in-depth-knowledge/puchase-countries-currencies-locales/)**.")

  public String getLocale() {
    return locale;
  }


  public void setLocale(String locale) {
    
    
    
    this.locale = locale;
  }


  public Session merchantData(String merchantData) {
    
    
    if (merchantData != null && merchantData.length() < 0) {
      throw new IllegalArgumentException("Invalid value for merchantData. Length must be greater than or equal to 0.");
    }
    
    this.merchantData = merchantData;
    return this;
  }

   /**
   * Pass through field to send any information about the order to be used later for reference while retrieving the order details (max 6000 characters)
   * @return merchantData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{\"order_specific\":[{\"substore\":\"Women's Fashion\",\"product_name\":\"Women Sweatshirt\"}]}", value = "Pass through field to send any information about the order to be used later for reference while retrieving the order details (max 6000 characters)")

  public String getMerchantData() {
    return merchantData;
  }


  public void setMerchantData(String merchantData) {
    
    
    if (merchantData != null && merchantData.length() < 0) {
      throw new IllegalArgumentException("Invalid value for merchantData. Length must be greater than or equal to 0.");
    }
    this.merchantData = merchantData;
  }


  public Session merchantReference1(String merchantReference1) {
    
    
    if (merchantReference1 != null && merchantReference1.length() < 0) {
      throw new IllegalArgumentException("Invalid value for merchantReference1. Length must be greater than or equal to 0.");
    }
    
    this.merchantReference1 = merchantReference1;
    return this;
  }

   /**
   * Used for storing merchant&#39;s internal order number or other reference.
   * @return merchantReference1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ON4711", value = "Used for storing merchant's internal order number or other reference.")

  public String getMerchantReference1() {
    return merchantReference1;
  }


  public void setMerchantReference1(String merchantReference1) {
    
    
    if (merchantReference1 != null && merchantReference1.length() < 0) {
      throw new IllegalArgumentException("Invalid value for merchantReference1. Length must be greater than or equal to 0.");
    }
    this.merchantReference1 = merchantReference1;
  }


  public Session merchantReference2(String merchantReference2) {
    
    
    if (merchantReference2 != null && merchantReference2.length() < 0) {
      throw new IllegalArgumentException("Invalid value for merchantReference2. Length must be greater than or equal to 0.");
    }
    
    this.merchantReference2 = merchantReference2;
    return this;
  }

   /**
   * Used for storing merchant&#39;s internal order number or other reference. The value is available in the settlement files. (max 255 characters).
   * @return merchantReference2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "hdt53h-zdgg6-hdaff2", value = "Used for storing merchant's internal order number or other reference. The value is available in the settlement files. (max 255 characters).")

  public String getMerchantReference2() {
    return merchantReference2;
  }


  public void setMerchantReference2(String merchantReference2) {
    
    
    if (merchantReference2 != null && merchantReference2.length() < 0) {
      throw new IllegalArgumentException("Invalid value for merchantReference2. Length must be greater than or equal to 0.");
    }
    this.merchantReference2 = merchantReference2;
  }


  public Session merchantUrls(MerchantUrls merchantUrls) {
    
    
    
    
    this.merchantUrls = merchantUrls;
    return this;
  }

   /**
   * Get merchantUrls
   * @return merchantUrls
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MerchantUrls getMerchantUrls() {
    return merchantUrls;
  }


  public void setMerchantUrls(MerchantUrls merchantUrls) {
    
    
    
    this.merchantUrls = merchantUrls;
  }


  public Session options(Options options) {
    
    
    
    
    this.options = options;
    return this;
  }

   /**
   * Get options
   * @return options
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Options getOptions() {
    return options;
  }


  public void setOptions(Options options) {
    
    
    
    this.options = options;
  }


  public Session orderAmount(Long orderAmount) {
    if (orderAmount != null && orderAmount < 0) {
      throw new IllegalArgumentException("Invalid value for orderAmount. Must be greater than or equal to 0.");
    }
    
    
    
    this.orderAmount = orderAmount;
    return this;
  }

   /**
   * Total amount of the order including tax and any available discounts. The value should be in non-negative minor units. Eg: 25 Euros should be 2500.
   * minimum: 0
   * @return orderAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2000", value = "Total amount of the order including tax and any available discounts. The value should be in non-negative minor units. Eg: 25 Euros should be 2500.")

  public Long getOrderAmount() {
    return orderAmount;
  }


  public void setOrderAmount(Long orderAmount) {
    if (orderAmount != null && orderAmount < 0) {
      throw new IllegalArgumentException("Invalid value for orderAmount. Must be greater than or equal to 0.");
    }
    
    
    this.orderAmount = orderAmount;
  }


  public Session orderLines(List<OrderLine> orderLines) {
    
    
    
    
    this.orderLines = orderLines;
    return this;
  }

  public Session addOrderLinesItem(OrderLine orderLinesItem) {
    if (this.orderLines == null) {
      this.orderLines = new ArrayList<>();
    }
    this.orderLines.add(orderLinesItem);
    return this;
  }

   /**
   * The array containing list of line items that are part of this order. Maximum of 1000 line items could be processed in a single order.
   * @return orderLines
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The array containing list of line items that are part of this order. Maximum of 1000 line items could be processed in a single order.")

  public List<OrderLine> getOrderLines() {
    return orderLines;
  }


  public void setOrderLines(List<OrderLine> orderLines) {
    
    
    
    this.orderLines = orderLines;
  }


  public Session orderTaxAmount(Long orderTaxAmount) {
    if (orderTaxAmount != null && orderTaxAmount < 0) {
      throw new IllegalArgumentException("Invalid value for orderTaxAmount. Must be greater than or equal to 0.");
    }
    
    
    
    this.orderTaxAmount = orderTaxAmount;
    return this;
  }

   /**
   * Total tax amount of the order. The value should be in non-negative minor units. Eg: 25 Euros should be 2500.
   * minimum: 0
   * @return orderTaxAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "333", value = "Total tax amount of the order. The value should be in non-negative minor units. Eg: 25 Euros should be 2500.")

  public Long getOrderTaxAmount() {
    return orderTaxAmount;
  }


  public void setOrderTaxAmount(Long orderTaxAmount) {
    if (orderTaxAmount != null && orderTaxAmount < 0) {
      throw new IllegalArgumentException("Invalid value for orderTaxAmount. Must be greater than or equal to 0.");
    }
    
    
    this.orderTaxAmount = orderTaxAmount;
  }


   /**
   * Available payment method categories
   * @return paymentMethodCategories
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Available payment method categories")

  public Set<PaymentMethodCategory> getPaymentMethodCategories() {
    return paymentMethodCategories;
  }




  public Session purchaseCountry(String purchaseCountry) {
    
    
    
    
    this.purchaseCountry = purchaseCountry;
    return this;
  }

   /**
   * The purchase country of the customer. The billing country always overrides purchase country if the values are different. Formatted according to ISO 3166 alpha-2 standard, e.g. GB, SE, DE, US, etc.
   * @return purchaseCountry
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "GB", value = "The purchase country of the customer. The billing country always overrides purchase country if the values are different. Formatted according to ISO 3166 alpha-2 standard, e.g. GB, SE, DE, US, etc.")

  public String getPurchaseCountry() {
    return purchaseCountry;
  }


  public void setPurchaseCountry(String purchaseCountry) {
    
    
    
    this.purchaseCountry = purchaseCountry;
  }


  public Session purchaseCurrency(String purchaseCurrency) {
    
    
    
    
    this.purchaseCurrency = purchaseCurrency;
    return this;
  }

   /**
   * The purchase currency of the order. Formatted according to ISO 4217 standard, e.g. USD, EUR, SEK, GBP, etc.
   * @return purchaseCurrency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "GBP", value = "The purchase currency of the order. Formatted according to ISO 4217 standard, e.g. USD, EUR, SEK, GBP, etc.")

  public String getPurchaseCurrency() {
    return purchaseCurrency;
  }


  public void setPurchaseCurrency(String purchaseCurrency) {
    
    
    
    this.purchaseCurrency = purchaseCurrency;
  }


  public Session shippingAddress(Address shippingAddress) {
    
    
    
    
    this.shippingAddress = shippingAddress;
    return this;
  }

   /**
   * Get shippingAddress
   * @return shippingAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Address getShippingAddress() {
    return shippingAddress;
  }


  public void setShippingAddress(Address shippingAddress) {
    
    
    
    this.shippingAddress = shippingAddress;
  }


   /**
   * The current status of the session. Possible values: &#39;complete&#39;, &#39;incomplete&#39; where &#39;complete&#39; is set when the order has been placed.
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "COMPLETE", value = "The current status of the session. Possible values: 'complete', 'incomplete' where 'complete' is set when the order has been placed.")

  public StatusEnum getStatus() {
    return status;
  }




  public Session intent(IntentEnum intent) {
    
    
    
    
    this.intent = intent;
    return this;
  }

   /**
   * Intent for the session. The field is designed to let partners inform Klarna of the purpose of the customerâ€™s session.
   * @return intent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "BUY", value = "Intent for the session. The field is designed to let partners inform Klarna of the purpose of the customerâ€™s session.")

  public IntentEnum getIntent() {
    return intent;
  }


  public void setIntent(IntentEnum intent) {
    
    
    
    this.intent = intent;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Session instance itself
   */
  public Session putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Session session = (Session) o;
    return Objects.equals(this.acquiringChannel, session.acquiringChannel) &&
        Objects.equals(this.attachment, session.attachment) &&
        Objects.equals(this.authorizationToken, session.authorizationToken) &&
        Objects.equals(this.billingAddress, session.billingAddress) &&
        Objects.equals(this.clientToken, session.clientToken) &&
        Objects.equals(this.customPaymentMethodIds, session.customPaymentMethodIds) &&
        Objects.equals(this.customer, session.customer) &&
        Objects.equals(this.design, session.design) &&
        Objects.equals(this.expiresAt, session.expiresAt) &&
        Objects.equals(this.locale, session.locale) &&
        Objects.equals(this.merchantData, session.merchantData) &&
        Objects.equals(this.merchantReference1, session.merchantReference1) &&
        Objects.equals(this.merchantReference2, session.merchantReference2) &&
        Objects.equals(this.merchantUrls, session.merchantUrls) &&
        Objects.equals(this.options, session.options) &&
        Objects.equals(this.orderAmount, session.orderAmount) &&
        Objects.equals(this.orderLines, session.orderLines) &&
        Objects.equals(this.orderTaxAmount, session.orderTaxAmount) &&
        Objects.equals(this.paymentMethodCategories, session.paymentMethodCategories) &&
        Objects.equals(this.purchaseCountry, session.purchaseCountry) &&
        Objects.equals(this.purchaseCurrency, session.purchaseCurrency) &&
        Objects.equals(this.shippingAddress, session.shippingAddress) &&
        Objects.equals(this.status, session.status) &&
        Objects.equals(this.intent, session.intent)&&
        Objects.equals(this.additionalProperties, session.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acquiringChannel, attachment, authorizationToken, billingAddress, clientToken, customPaymentMethodIds, customer, design, expiresAt, locale, merchantData, merchantReference1, merchantReference2, merchantUrls, options, orderAmount, orderLines, orderTaxAmount, paymentMethodCategories, purchaseCountry, purchaseCurrency, shippingAddress, status, intent, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Session {\n");
    sb.append("    acquiringChannel: ").append(toIndentedString(acquiringChannel)).append("\n");
    sb.append("    attachment: ").append(toIndentedString(attachment)).append("\n");
    sb.append("    authorizationToken: ").append(toIndentedString(authorizationToken)).append("\n");
    sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    customPaymentMethodIds: ").append(toIndentedString(customPaymentMethodIds)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    design: ").append(toIndentedString(design)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    merchantData: ").append(toIndentedString(merchantData)).append("\n");
    sb.append("    merchantReference1: ").append(toIndentedString(merchantReference1)).append("\n");
    sb.append("    merchantReference2: ").append(toIndentedString(merchantReference2)).append("\n");
    sb.append("    merchantUrls: ").append(toIndentedString(merchantUrls)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    orderAmount: ").append(toIndentedString(orderAmount)).append("\n");
    sb.append("    orderLines: ").append(toIndentedString(orderLines)).append("\n");
    sb.append("    orderTaxAmount: ").append(toIndentedString(orderTaxAmount)).append("\n");
    sb.append("    paymentMethodCategories: ").append(toIndentedString(paymentMethodCategories)).append("\n");
    sb.append("    purchaseCountry: ").append(toIndentedString(purchaseCountry)).append("\n");
    sb.append("    purchaseCurrency: ").append(toIndentedString(purchaseCurrency)).append("\n");
    sb.append("    shippingAddress: ").append(toIndentedString(shippingAddress)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    intent: ").append(toIndentedString(intent)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acquiring_channel");
    openapiFields.add("attachment");
    openapiFields.add("authorization_token");
    openapiFields.add("billing_address");
    openapiFields.add("client_token");
    openapiFields.add("custom_payment_method_ids");
    openapiFields.add("customer");
    openapiFields.add("design");
    openapiFields.add("expires_at");
    openapiFields.add("locale");
    openapiFields.add("merchant_data");
    openapiFields.add("merchant_reference1");
    openapiFields.add("merchant_reference2");
    openapiFields.add("merchant_urls");
    openapiFields.add("options");
    openapiFields.add("order_amount");
    openapiFields.add("order_lines");
    openapiFields.add("order_tax_amount");
    openapiFields.add("payment_method_categories");
    openapiFields.add("purchase_country");
    openapiFields.add("purchase_currency");
    openapiFields.add("shipping_address");
    openapiFields.add("status");
    openapiFields.add("intent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Session
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Session.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Session is not found in the empty JSON string", Session.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("acquiring_channel") != null && !jsonObj.get("acquiring_channel").isJsonNull()) && !jsonObj.get("acquiring_channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquiring_channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquiring_channel").toString()));
      }
      // validate the optional field `attachment`
      if (jsonObj.get("attachment") != null && !jsonObj.get("attachment").isJsonNull()) {
        Attachment.validateJsonObject(jsonObj.getAsJsonObject("attachment"));
      }
      if ((jsonObj.get("authorization_token") != null && !jsonObj.get("authorization_token").isJsonNull()) && !jsonObj.get("authorization_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorization_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorization_token").toString()));
      }
      // validate the optional field `billing_address`
      if (jsonObj.get("billing_address") != null && !jsonObj.get("billing_address").isJsonNull()) {
        Address.validateJsonObject(jsonObj.getAsJsonObject("billing_address"));
      }
      if ((jsonObj.get("client_token") != null && !jsonObj.get("client_token").isJsonNull()) && !jsonObj.get("client_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_token").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("custom_payment_method_ids") != null && !jsonObj.get("custom_payment_method_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_payment_method_ids` to be an array in the JSON string but got `%s`", jsonObj.get("custom_payment_method_ids").toString()));
      }
      // validate the optional field `customer`
      if (jsonObj.get("customer") != null && !jsonObj.get("customer").isJsonNull()) {
        Customer.validateJsonObject(jsonObj.getAsJsonObject("customer"));
      }
      if ((jsonObj.get("design") != null && !jsonObj.get("design").isJsonNull()) && !jsonObj.get("design").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `design` to be a primitive type in the JSON string but got `%s`", jsonObj.get("design").toString()));
      }
      if ((jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      if ((jsonObj.get("merchant_data") != null && !jsonObj.get("merchant_data").isJsonNull()) && !jsonObj.get("merchant_data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_data").toString()));
      }
      if ((jsonObj.get("merchant_reference1") != null && !jsonObj.get("merchant_reference1").isJsonNull()) && !jsonObj.get("merchant_reference1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_reference1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_reference1").toString()));
      }
      if ((jsonObj.get("merchant_reference2") != null && !jsonObj.get("merchant_reference2").isJsonNull()) && !jsonObj.get("merchant_reference2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_reference2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_reference2").toString()));
      }
      // validate the optional field `merchant_urls`
      if (jsonObj.get("merchant_urls") != null && !jsonObj.get("merchant_urls").isJsonNull()) {
        MerchantUrls.validateJsonObject(jsonObj.getAsJsonObject("merchant_urls"));
      }
      // validate the optional field `options`
      if (jsonObj.get("options") != null && !jsonObj.get("options").isJsonNull()) {
        Options.validateJsonObject(jsonObj.getAsJsonObject("options"));
      }
      if (jsonObj.get("order_lines") != null && !jsonObj.get("order_lines").isJsonNull()) {
        JsonArray jsonArrayorderLines = jsonObj.getAsJsonArray("order_lines");
        if (jsonArrayorderLines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("order_lines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `order_lines` to be an array in the JSON string but got `%s`", jsonObj.get("order_lines").toString()));
          }

          // validate the optional field `order_lines` (array)
          for (int i = 0; i < jsonArrayorderLines.size(); i++) {
            OrderLine.validateJsonObject(jsonArrayorderLines.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("payment_method_categories") != null && !jsonObj.get("payment_method_categories").isJsonNull()) {
        JsonArray jsonArraypaymentMethodCategories = jsonObj.getAsJsonArray("payment_method_categories");
        if (jsonArraypaymentMethodCategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("payment_method_categories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `payment_method_categories` to be an array in the JSON string but got `%s`", jsonObj.get("payment_method_categories").toString()));
          }

          // validate the optional field `payment_method_categories` (array)
          for (int i = 0; i < jsonArraypaymentMethodCategories.size(); i++) {
            PaymentMethodCategory.validateJsonObject(jsonArraypaymentMethodCategories.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("purchase_country") != null && !jsonObj.get("purchase_country").isJsonNull()) && !jsonObj.get("purchase_country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchase_country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchase_country").toString()));
      }
      if ((jsonObj.get("purchase_currency") != null && !jsonObj.get("purchase_currency").isJsonNull()) && !jsonObj.get("purchase_currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchase_currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchase_currency").toString()));
      }
      // validate the optional field `shipping_address`
      if (jsonObj.get("shipping_address") != null && !jsonObj.get("shipping_address").isJsonNull()) {
        Address.validateJsonObject(jsonObj.getAsJsonObject("shipping_address"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("intent") != null && !jsonObj.get("intent").isJsonNull()) && !jsonObj.get("intent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `intent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("intent").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Session.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Session' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Session> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Session.class));

       return (TypeAdapter<T>) new TypeAdapter<Session>() {
           @Override
           public void write(JsonWriter out, Session value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Session read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Session instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Session given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Session
  * @throws IOException if the JSON string is invalid with respect to Session
  */
  public static Session fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Session.class);
  }

 /**
  * Convert an instance of Session to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

