/*
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  **Note:** Examples provided in this section includes full payloads, including all supported fields , required and optionals. In order to implement a best in class request we recommend you don't include customer details when initiating a payment session. Refer to [Initiate a payment](https://docs.klarna.com/klarna-payments/integrate-with-klarna-payments/step-1-initiate-a-payment/) section for further details.  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Options
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Options {
  public static final String SERIALIZED_NAME_COLOR_BORDER = "color_border";
  @SerializedName(SERIALIZED_NAME_COLOR_BORDER)
  private String colorBorder;

  public static final String SERIALIZED_NAME_COLOR_BORDER_SELECTED = "color_border_selected";
  @SerializedName(SERIALIZED_NAME_COLOR_BORDER_SELECTED)
  private String colorBorderSelected;

  public static final String SERIALIZED_NAME_COLOR_DETAILS = "color_details";
  @SerializedName(SERIALIZED_NAME_COLOR_DETAILS)
  private String colorDetails;

  public static final String SERIALIZED_NAME_COLOR_TEXT = "color_text";
  @SerializedName(SERIALIZED_NAME_COLOR_TEXT)
  private String colorText;

  public static final String SERIALIZED_NAME_RADIUS_BORDER = "radius_border";
  @SerializedName(SERIALIZED_NAME_RADIUS_BORDER)
  private String radiusBorder;

  public Options() {
  }

  public Options colorBorder(String colorBorder) {
    
    
    
    
    this.colorBorder = colorBorder;
    return this;
  }

   /**
   * Color for the border of elements within the iFrame. Value should be a CSS hex color, e.g. \&quot;#FF9900\&quot;
   * @return colorBorder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "#FF9900", value = "Color for the border of elements within the iFrame. Value should be a CSS hex color, e.g. \"#FF9900\"")

  public String getColorBorder() {
    return colorBorder;
  }


  public void setColorBorder(String colorBorder) {
    
    
    
    this.colorBorder = colorBorder;
  }


  public Options colorBorderSelected(String colorBorderSelected) {
    
    
    
    
    this.colorBorderSelected = colorBorderSelected;
    return this;
  }

   /**
   * Color for the border of elements within the iFrame when selected by the customer. Value should be a CSS hex color, e.g. \&quot;#FF9900\&quot;
   * @return colorBorderSelected
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "#FF9900", value = "Color for the border of elements within the iFrame when selected by the customer. Value should be a CSS hex color, e.g. \"#FF9900\"")

  public String getColorBorderSelected() {
    return colorBorderSelected;
  }


  public void setColorBorderSelected(String colorBorderSelected) {
    
    
    
    this.colorBorderSelected = colorBorderSelected;
  }


  public Options colorDetails(String colorDetails) {
    
    
    
    
    this.colorDetails = colorDetails;
    return this;
  }

   /**
   * Color for the bullet points within the iFrame. Value should be a CSS hex color, e.g. \&quot;#FF9900\&quot;
   * @return colorDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "#FF9900", value = "Color for the bullet points within the iFrame. Value should be a CSS hex color, e.g. \"#FF9900\"")

  public String getColorDetails() {
    return colorDetails;
  }


  public void setColorDetails(String colorDetails) {
    
    
    
    this.colorDetails = colorDetails;
  }


  public Options colorText(String colorText) {
    
    
    
    
    this.colorText = colorText;
    return this;
  }

   /**
   * Color for the texts within the iFrame. Value should be a CSS hex color, e.g. \&quot;#FF9900\&quot;
   * @return colorText
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "#FF9900", value = "Color for the texts within the iFrame. Value should be a CSS hex color, e.g. \"#FF9900\"")

  public String getColorText() {
    return colorText;
  }


  public void setColorText(String colorText) {
    
    
    
    this.colorText = colorText;
  }


  public Options radiusBorder(String radiusBorder) {
    
    
    
    
    this.radiusBorder = radiusBorder;
    return this;
  }

   /**
   * Radius for the border of elements within the iFrame.
   * @return radiusBorder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5px", value = "Radius for the border of elements within the iFrame.")

  public String getRadiusBorder() {
    return radiusBorder;
  }


  public void setRadiusBorder(String radiusBorder) {
    
    
    
    this.radiusBorder = radiusBorder;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Options instance itself
   */
  public Options putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Options options = (Options) o;
    return Objects.equals(this.colorBorder, options.colorBorder) &&
        Objects.equals(this.colorBorderSelected, options.colorBorderSelected) &&
        Objects.equals(this.colorDetails, options.colorDetails) &&
        Objects.equals(this.colorText, options.colorText) &&
        Objects.equals(this.radiusBorder, options.radiusBorder)&&
        Objects.equals(this.additionalProperties, options.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(colorBorder, colorBorderSelected, colorDetails, colorText, radiusBorder, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Options {\n");
    sb.append("    colorBorder: ").append(toIndentedString(colorBorder)).append("\n");
    sb.append("    colorBorderSelected: ").append(toIndentedString(colorBorderSelected)).append("\n");
    sb.append("    colorDetails: ").append(toIndentedString(colorDetails)).append("\n");
    sb.append("    colorText: ").append(toIndentedString(colorText)).append("\n");
    sb.append("    radiusBorder: ").append(toIndentedString(radiusBorder)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("color_border");
    openapiFields.add("color_border_selected");
    openapiFields.add("color_details");
    openapiFields.add("color_text");
    openapiFields.add("radius_border");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Options
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Options.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Options is not found in the empty JSON string", Options.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("color_border") != null && !jsonObj.get("color_border").isJsonNull()) && !jsonObj.get("color_border").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color_border` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color_border").toString()));
      }
      if ((jsonObj.get("color_border_selected") != null && !jsonObj.get("color_border_selected").isJsonNull()) && !jsonObj.get("color_border_selected").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color_border_selected` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color_border_selected").toString()));
      }
      if ((jsonObj.get("color_details") != null && !jsonObj.get("color_details").isJsonNull()) && !jsonObj.get("color_details").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color_details` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color_details").toString()));
      }
      if ((jsonObj.get("color_text") != null && !jsonObj.get("color_text").isJsonNull()) && !jsonObj.get("color_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color_text").toString()));
      }
      if ((jsonObj.get("radius_border") != null && !jsonObj.get("radius_border").isJsonNull()) && !jsonObj.get("radius_border").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `radius_border` to be a primitive type in the JSON string but got `%s`", jsonObj.get("radius_border").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Options.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Options' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Options> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Options.class));

       return (TypeAdapter<T>) new TypeAdapter<Options>() {
           @Override
           public void write(JsonWriter out, Options value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Options read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Options instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Options given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Options
  * @throws IOException if the JSON string is invalid with respect to Options
  */
  public static Options fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Options.class);
  }

 /**
  * Convert an instance of Options to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

